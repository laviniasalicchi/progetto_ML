import numpy as np


# activation function sigmoid
# deriv per poter utilizzare in futuro la f'(net)
def sigmoid(x, deriv=False):
    a = 1
    if (deriv == True):
        return x * (1 - x)
    return 1 / (1 + np.exp(-x))

def net_func(x, weights):
    result = np.dot(x, weights)
    return result[0][0]

def out(net, activation):
    return (activation(net))
    
def error(target, output):
    return (target-output)

def delta(error, net):
    print('sigmoid derivato:',sigmoid(net, True))
    return -2 * error * sigmoid(net, True)
    